{"ast":null,"code":"'use strict';\n\nconst Qs = require('qs');\n\nconst qsDefaultEncoder = require('qs/lib/utils').encode;\n\nconst isNode = require('detect-node');\n\nconst ndjson = require('ndjson');\n\nconst pump = require('pump');\n\nconst once = require('once');\n\nconst streamToValue = require('./stream-to-value');\n\nconst streamToJsonValue = require('./stream-to-json-value');\n\nconst request = require('./request');\n\nconst log = require('debug')('ipfs-api:request'); // -- Internal\n\n\nfunction parseError(res, cb) {\n  const error = new Error(\"Server responded with \".concat(res.statusCode));\n  streamToJsonValue(res, (err, payload) => {\n    if (err) {\n      return cb(err);\n    }\n\n    if (payload) {\n      error.code = payload.Code;\n      error.message = payload.Message || payload.toString();\n      error.type = payload.Type;\n    }\n\n    cb(error);\n  });\n}\n\nfunction onRes(buffer, cb) {\n  return res => {\n    const stream = Boolean(res.headers['x-stream-output']);\n    const chunkedObjects = Boolean(res.headers['x-chunked-output']);\n    const isJson = res.headers['content-type'] && res.headers['content-type'].indexOf('application/json') === 0;\n\n    if (res.req) {\n      log(res.req.method, \"\".concat(res.req.getHeaders().host).concat(res.req.path), res.statusCode, res.statusMessage);\n    } else {\n      log(res.url, res.statusCode, res.statusMessage);\n    }\n\n    if (res.statusCode >= 400 || !res.statusCode) {\n      return parseError(res, cb);\n    } // Return the response stream directly\n\n\n    if (stream && !buffer) {\n      return cb(null, res);\n    } // Return a stream of JSON objects\n\n\n    if (chunkedObjects && isJson) {\n      const outputStream = ndjson.parse();\n      pump(res, outputStream);\n      res.on('end', () => {\n        let err = res.trailers['x-stream-error'];\n\n        if (err) {\n          // Not all errors are JSON\n          try {\n            err = JSON.parse(err);\n          } catch (e) {\n            err = {\n              Message: err\n            };\n          }\n\n          outputStream.emit('error', new Error(err.Message));\n        }\n      });\n      return cb(null, outputStream);\n    } // Return a JSON object\n\n\n    if (isJson) {\n      return streamToJsonValue(res, cb);\n    } // Return a value\n\n\n    return streamToValue(res, cb);\n  };\n}\n\nfunction requestAPI(config, options, callback) {\n  callback = once(callback);\n  options.qs = options.qs || {};\n\n  if (Array.isArray(options.path)) {\n    options.path = options.path.join('/');\n  }\n\n  if (options.args && !Array.isArray(options.args)) {\n    options.args = [options.args];\n  }\n\n  if (options.args) {\n    options.qs.arg = options.args;\n  }\n\n  if (options.progress) {\n    options.qs.progress = true;\n  }\n\n  if (options.qs.r) {\n    options.qs.recursive = options.qs.r; // From IPFS 0.4.0, it throws an error when both r and recursive are passed\n\n    delete options.qs.r;\n  }\n\n  options.qs['stream-channels'] = true;\n\n  if (options.stream) {\n    options.buffer = false;\n  } // this option is only used internally, not passed to daemon\n\n\n  delete options.qs.followSymlinks;\n  const method = 'POST';\n  const headers = Object.assign({}, config.headers);\n\n  if (isNode) {\n    // Browsers do not allow you to modify the user agent\n    headers['User-Agent'] = config['user-agent'];\n  }\n\n  if (options.multipart) {\n    if (!options.multipartBoundary) {\n      return callback(new Error('No multipartBoundary'));\n    }\n\n    headers['Content-Type'] = \"multipart/form-data; boundary=\".concat(options.multipartBoundary);\n  }\n\n  const qs = Qs.stringify(options.qs, {\n    arrayFormat: 'repeat',\n    encoder: data => {\n      // TODO: future releases of qs will provide the default\n      // encoder as a 2nd argument to this function; it will\n      // no longer be necessary to import qsDefaultEncoder\n      if (Buffer.isBuffer(data)) {\n        let uriEncoded = '';\n\n        for (const byte of data) {\n          // https://tools.ietf.org/html/rfc3986#page-14\n          // ALPHA (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D), period (%2E), underscore (%5F), or tilde (%7E)\n          if (byte >= 0x41 && byte <= 0x5A || byte >= 0x61 && byte <= 0x7A || byte >= 0x30 && byte <= 0x39 || byte === 0x2D || byte === 0x2E || byte === 0x5F || byte === 0x7E) {\n            uriEncoded += String.fromCharCode(byte);\n          } else {\n            const hex = byte.toString(16); // String.prototype.padStart() not widely supported yet\n\n            const padded = hex.length === 1 ? \"0\".concat(hex) : hex;\n            uriEncoded += \"%\".concat(padded);\n          }\n        }\n\n        return uriEncoded;\n      }\n\n      return qsDefaultEncoder(data);\n    }\n  });\n  const reqOptions = {\n    hostname: config.host,\n    path: \"\".concat(config['api-path']).concat(options.path, \"?\").concat(qs),\n    port: config.port,\n    method: method,\n    headers: headers,\n    protocol: \"\".concat(config.protocol, \":\")\n  };\n  const req = request(config.protocol)(reqOptions, onRes(options.buffer, callback));\n  req.on('error', err => {\n    callback(err);\n  });\n\n  if (!options.stream) {\n    req.end();\n  }\n\n  return req;\n} //\n// -- Module Interface\n\n\nexports = module.exports = config => {\n  /*\n   * options: {\n   *   path:   // API path (like /add or /config) - type: string\n   *   args:   // Arguments to the command - type: object\n   *   qs:     // Opts as query string opts to the command --something - type: object\n   *   files:  // files to be sent - type: string, buffer or array of strings or buffers\n   *   buffer: // buffer the request before sending it - type: bool\n   * }\n   */\n  const send = (options, callback) => {\n    if (typeof options !== 'object') {\n      return callback(new Error('no options were passed'));\n    }\n\n    return requestAPI(config, options, callback);\n  }; // Send a HTTP request and pass via a transform function\n  // to convert the response data to wanted format before\n  // returning it to the callback.\n  // Eg. send.andTransform({}, (e) => JSON.parse(e), (err, res) => ...)\n\n\n  send.andTransform = (options, transform, callback) => {\n    return send(options, (err, res) => {\n      if (err) {\n        return callback(err);\n      }\n\n      transform(res, callback);\n    });\n  };\n\n  return send;\n};","map":null,"metadata":{},"sourceType":"script"}