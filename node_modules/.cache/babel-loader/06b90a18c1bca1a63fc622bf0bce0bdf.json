{"ast":null,"code":"'use strict';\n\nconst isNode = require('detect-node');\n\nconst flatmap = require('flatmap');\n\nfunction loadPaths(opts, file) {\n  const path = require('path');\n\n  const fs = require('fs');\n\n  const glob = require('glob');\n\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true;\n  file = path.resolve(file);\n  const stats = fs.statSync(file);\n\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive');\n  }\n\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/');\n    const fullDir = file + (file.endsWith('/') ? '' : '/');\n    let dirName = fullDir.split('/');\n    dirName = dirName[dirName.length - 2] + '/';\n    const mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    });\n    return mg.found.map(name => {\n      const fqn = fullDir + name; // symlinks\n\n      if (mg.symlinks[fqn] === true) {\n        return {\n          path: dirName + name,\n          symlink: true,\n          dir: false,\n          content: fs.readlinkSync(fqn)\n        };\n      } // files\n\n\n      if (mg.cache[fqn] === 'FILE') {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: false,\n          content: fs.createReadStream(fqn)\n        };\n      } // directories\n\n\n      if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: true\n        };\n      } // files inside symlinks and others\n\n    }) // filter out null files\n    .filter(Boolean);\n  }\n\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  };\n}\n\nfunction prepareFile(file, opts) {\n  let files = [].concat(file);\n  return flatmap(files, file => {\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node');\n      }\n\n      return loadPaths(opts, file);\n    }\n\n    if (file.path && !file.content) {\n      file.dir = true;\n      return file;\n    }\n\n    if (file.content || file.dir) {\n      return file;\n    }\n\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: file\n    };\n  });\n}\n\nexports = module.exports = prepareFile;","map":null,"metadata":{},"sourceType":"script"}