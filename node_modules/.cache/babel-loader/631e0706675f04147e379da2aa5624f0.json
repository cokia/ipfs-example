{"ast":null,"code":"/**\n * Functions to output keys in SSH-friendly formats.\n *\n * This is part of the Forge project which may be used under the terms of\n * either the BSD License or the GNU General Public License (GPL) Version 2.\n *\n * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE\n *\n * @author https://github.com/shellac\n */\nvar forge = require('./forge');\n\nrequire('./aes');\n\nrequire('./hmac');\n\nrequire('./md5');\n\nrequire('./sha1');\n\nrequire('./util');\n\nvar ssh = module.exports = forge.ssh = forge.ssh || {};\n/**\n * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.\n *\n * @param privateKey the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n * @param comment a comment to include in the key file.\n *\n * @return the PPK file as a string.\n */\n\nssh.privateKeyToPutty = function (privateKey, passphrase, comment) {\n  comment = comment || '';\n  passphrase = passphrase || '';\n  var algorithm = 'ssh-rsa';\n  var encryptionAlgorithm = passphrase === '' ? 'none' : 'aes256-cbc';\n  var ppk = 'PuTTY-User-Key-File-2: ' + algorithm + '\\r\\n';\n  ppk += 'Encryption: ' + encryptionAlgorithm + '\\r\\n';\n  ppk += 'Comment: ' + comment + '\\r\\n'; // public key into buffer for ppk\n\n  var pubbuffer = forge.util.createBuffer();\n\n  _addStringToBuffer(pubbuffer, algorithm);\n\n  _addBigIntegerToBuffer(pubbuffer, privateKey.e);\n\n  _addBigIntegerToBuffer(pubbuffer, privateKey.n); // write public key\n\n\n  var pub = forge.util.encode64(pubbuffer.bytes(), 64);\n  var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \\r\\n\n\n  ppk += 'Public-Lines: ' + length + '\\r\\n';\n  ppk += pub; // private key into a buffer\n\n  var privbuffer = forge.util.createBuffer();\n\n  _addBigIntegerToBuffer(privbuffer, privateKey.d);\n\n  _addBigIntegerToBuffer(privbuffer, privateKey.p);\n\n  _addBigIntegerToBuffer(privbuffer, privateKey.q);\n\n  _addBigIntegerToBuffer(privbuffer, privateKey.qInv); // optionally encrypt the private key\n\n\n  var priv;\n\n  if (!passphrase) {\n    // use the unencrypted buffer\n    priv = forge.util.encode64(privbuffer.bytes(), 64);\n  } else {\n    // encrypt RSA key using passphrase\n    var encLen = privbuffer.length() + 16 - 1;\n    encLen -= encLen % 16; // pad private key with sha1-d data -- needs to be a multiple of 16\n\n    var padding = _sha1(privbuffer.bytes());\n\n    padding.truncate(padding.length() - encLen + privbuffer.length());\n    privbuffer.putBuffer(padding);\n    var aeskey = forge.util.createBuffer();\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x00', passphrase));\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x01', passphrase)); // encrypt some bytes using CBC mode\n    // key is 40 bytes, so truncate *by* 8 bytes\n\n    var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), 'CBC');\n    cipher.start(forge.util.createBuffer().fillWithByte(0, 16));\n    cipher.update(privbuffer.copy());\n    cipher.finish();\n    var encrypted = cipher.output; // Note: this appears to differ from Putty -- is forge wrong, or putty?\n    // due to padding we finish as an exact multiple of 16\n\n    encrypted.truncate(16); // all padding\n\n    priv = forge.util.encode64(encrypted.bytes(), 64);\n  } // output private key\n\n\n  length = Math.floor(priv.length / 66) + 1; // 64 + \\r\\n\n\n  ppk += '\\r\\nPrivate-Lines: ' + length + '\\r\\n';\n  ppk += priv; // MAC\n\n  var mackey = _sha1('putty-private-key-file-mac-key', passphrase);\n\n  var macbuffer = forge.util.createBuffer();\n\n  _addStringToBuffer(macbuffer, algorithm);\n\n  _addStringToBuffer(macbuffer, encryptionAlgorithm);\n\n  _addStringToBuffer(macbuffer, comment);\n\n  macbuffer.putInt32(pubbuffer.length());\n  macbuffer.putBuffer(pubbuffer);\n  macbuffer.putInt32(privbuffer.length());\n  macbuffer.putBuffer(privbuffer);\n  var hmac = forge.hmac.create();\n  hmac.start('sha1', mackey);\n  hmac.update(macbuffer.bytes());\n  ppk += '\\r\\nPrivate-MAC: ' + hmac.digest().toHex() + '\\r\\n';\n  return ppk;\n};\n/**\n * Encodes a public RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param comment a comment.\n *\n * @return the public key in OpenSSH format.\n */\n\n\nssh.publicKeyToOpenSSH = function (key, comment) {\n  var type = 'ssh-rsa';\n  comment = comment || '';\n  var buffer = forge.util.createBuffer();\n\n  _addStringToBuffer(buffer, type);\n\n  _addBigIntegerToBuffer(buffer, key.e);\n\n  _addBigIntegerToBuffer(buffer, key.n);\n\n  return type + ' ' + forge.util.encode64(buffer.bytes()) + ' ' + comment;\n};\n/**\n * Encodes a private RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n *\n * @return the public key in OpenSSH format.\n */\n\n\nssh.privateKeyToOpenSSH = function (privateKey, passphrase) {\n  if (!passphrase) {\n    return forge.pki.privateKeyToPem(privateKey);\n  } // OpenSSH private key is just a legacy format, it seems\n\n\n  return forge.pki.encryptRsaPrivateKey(privateKey, passphrase, {\n    legacy: true,\n    algorithm: 'aes128'\n  });\n};\n/**\n * Gets the SSH fingerprint for the given public key.\n *\n * @param options the options to use.\n *          [md] the message digest object to use (defaults to forge.md.md5).\n *          [encoding] an alternative output encoding, such as 'hex'\n *            (defaults to none, outputs a byte buffer).\n *          [delimiter] the delimiter to use between bytes for 'hex' encoded\n *            output, eg: ':' (defaults to none).\n *\n * @return the fingerprint as a byte buffer or other encoding based on options.\n */\n\n\nssh.getPublicKeyFingerprint = function (key, options) {\n  options = options || {};\n  var md = options.md || forge.md.md5.create();\n  var type = 'ssh-rsa';\n  var buffer = forge.util.createBuffer();\n\n  _addStringToBuffer(buffer, type);\n\n  _addBigIntegerToBuffer(buffer, key.e);\n\n  _addBigIntegerToBuffer(buffer, key.n); // hash public key bytes\n\n\n  md.start();\n  md.update(buffer.getBytes());\n  var digest = md.digest();\n\n  if (options.encoding === 'hex') {\n    var hex = digest.toHex();\n\n    if (options.delimiter) {\n      return hex.match(/.{2}/g).join(options.delimiter);\n    }\n\n    return hex;\n  } else if (options.encoding === 'binary') {\n    return digest.getBytes();\n  } else if (options.encoding) {\n    throw new Error('Unknown encoding \"' + options.encoding + '\".');\n  }\n\n  return digest;\n};\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a big integer.\n */\n\n\nfunction _addBigIntegerToBuffer(buffer, val) {\n  var hexVal = val.toString(16); // ensure 2s complement +ve\n\n  if (hexVal[0] >= '8') {\n    hexVal = '00' + hexVal;\n  }\n\n  var bytes = forge.util.hexToBytes(hexVal);\n  buffer.putInt32(bytes.length);\n  buffer.putBytes(bytes);\n}\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a string.\n */\n\n\nfunction _addStringToBuffer(buffer, val) {\n  buffer.putInt32(val.length);\n  buffer.putString(val);\n}\n/**\n * Hashes the arguments into one value using SHA-1.\n *\n * @return the sha1 hash of the provided arguments.\n */\n\n\nfunction _sha1() {\n  var sha = forge.md.sha1.create();\n  var num = arguments.length;\n\n  for (var i = 0; i < num; ++i) {\n    sha.update(arguments[i]);\n  }\n\n  return sha.digest();\n}","map":null,"metadata":{},"sourceType":"script"}