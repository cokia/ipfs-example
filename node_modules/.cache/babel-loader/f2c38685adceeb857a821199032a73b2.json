{"ast":null,"code":"/**\n * Javascript implementation of RSA-KEM.\n *\n * @author Lautaro Cozzani Rodriguez\n * @author Dave Longley\n *\n * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./util');\n\nrequire('./random');\n\nrequire('./jsbn');\n\nmodule.exports = forge.kem = forge.kem || {};\nvar BigInteger = forge.jsbn.BigInteger;\n/**\n * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.\n */\n\nforge.kem.rsa = {};\n/**\n * Creates an RSA KEM API object for generating a secret asymmetric key.\n *\n * The symmetric key may be generated via a call to 'encrypt', which will\n * produce a ciphertext to be transmitted to the recipient and a key to be\n * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which\n * will produce the same secret key for the recipient to use to decrypt a\n * message that was encrypted with the secret key.\n *\n * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).\n * @param options the options to use.\n *          [prng] a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n */\n\nforge.kem.rsa.create = function (kdf, options) {\n  options = options || {};\n  var prng = options.prng || forge.random;\n  var kem = {};\n  /**\n   * Generates a secret key and its encapsulation.\n   *\n   * @param publicKey the RSA public key to encrypt with.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return an object with:\n   *   encapsulation: the ciphertext for generating the secret key, as a\n   *     binary-encoded string of bytes.\n   *   key: the secret key to use for encrypting a message.\n   */\n\n  kem.encrypt = function (publicKey, keyLength) {\n    // generate a random r where 1 > r > n\n    var byteLength = Math.ceil(publicKey.n.bitLength() / 8);\n    var r;\n\n    do {\n      r = new BigInteger(forge.util.bytesToHex(prng.getBytesSync(byteLength)), 16).mod(publicKey.n);\n    } while (r.equals(BigInteger.ZERO)); // prepend r with zeros\n\n\n    r = forge.util.hexToBytes(r.toString(16));\n    var zeros = byteLength - r.length;\n\n    if (zeros > 0) {\n      r = forge.util.fillString(String.fromCharCode(0), zeros) + r;\n    } // encrypt the random\n\n\n    var encapsulation = publicKey.encrypt(r, 'NONE'); // generate the secret key\n\n    var key = kdf.generate(r, keyLength);\n    return {\n      encapsulation: encapsulation,\n      key: key\n    };\n  };\n  /**\n   * Decrypts an encapsulated secret key.\n   *\n   * @param privateKey the RSA private key to decrypt with.\n   * @param encapsulation the ciphertext for generating the secret key, as\n   *          a binary-encoded string of bytes.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return the secret key as a binary-encoded string of bytes.\n   */\n\n\n  kem.decrypt = function (privateKey, encapsulation, keyLength) {\n    // decrypt the encapsulation and generate the secret key\n    var r = privateKey.decrypt(encapsulation, 'NONE');\n    return kdf.generate(r, keyLength);\n  };\n\n  return kem;\n}; // TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?\n\n/**\n * Creates a key derivation API object that implements KDF1 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF1 API object.\n */\n\n\nforge.kem.kdf1 = function (md, digestLength) {\n  _createKDF(this, md, 0, digestLength || md.digestLength);\n};\n/**\n * Creates a key derivation API object that implements KDF2 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF2 API object.\n */\n\n\nforge.kem.kdf2 = function (md, digestLength) {\n  _createKDF(this, md, 1, digestLength || md.digestLength);\n};\n/**\n * Creates a KDF1 or KDF2 API object.\n *\n * @param md the hash API to use.\n * @param counterStart the starting index for the counter.\n * @param digestLength the digest length to use.\n *\n * @return the KDF API object.\n */\n\n\nfunction _createKDF(kdf, md, counterStart, digestLength) {\n  /**\n   * Generate a key of the specified length.\n   *\n   * @param x the binary-encoded byte string to generate a key from.\n   * @param length the number of bytes to generate (the size of the key).\n   *\n   * @return the key as a binary-encoded string.\n   */\n  kdf.generate = function (x, length) {\n    var key = new forge.util.ByteBuffer(); // run counter from counterStart to ceil(length / Hash.len)\n\n    var k = Math.ceil(length / digestLength) + counterStart;\n    var c = new forge.util.ByteBuffer();\n\n    for (var i = counterStart; i < k; ++i) {\n      // I2OSP(i, 4): convert counter to an octet string of 4 octets\n      c.putInt32(i); // digest 'x' and the counter and add the result to the key\n\n      md.start();\n      md.update(x + c.getBytes());\n      var hash = md.digest();\n      key.putBytes(hash.getBytes(digestLength));\n    } // truncate to the correct key length\n\n\n    key.truncate(key.length() - length);\n    return key.getBytes();\n  };\n}","map":null,"metadata":{},"sourceType":"script"}