{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst multiaddr = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nmodule.exports = send => {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const verbose = opts.v || opts.verbose;\n    send({\n      path: 'swarm/peers',\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      } // go-ipfs <= 0.4.4\n\n\n      if (result.Strings) {\n        return callback(null, result.Strings.map(p => {\n          const res = {};\n\n          if (verbose) {\n            const parts = p.split(' ');\n            res.addr = multiaddr(parts[0]);\n            res.latency = parts[1];\n          } else {\n            res.addr = multiaddr(p);\n          }\n\n          res.peer = PeerId.createFromB58String(res.addr.decapsulate('ipfs'));\n          return res;\n        }));\n      } // go-ipfs >= 0.4.5\n\n\n      callback(null, (result.Peers || []).map(p => {\n        const res = {\n          addr: multiaddr(p.Addr),\n          peer: PeerId.createFromB58String(p.Peer),\n          muxer: p.Muxer\n        };\n\n        if (p.Latency) {\n          res.latency = p.Latency;\n        }\n\n        if (p.Streams) {\n          res.streams = p.Streams;\n        }\n\n        return res;\n      }));\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}