{"ast":null,"code":"var Stream = require('stream');\n\nmodule.exports = duplex;\n\nmodule.exports.source = function (source) {\n  return duplex(null, source);\n};\n\nmodule.exports.sink = function (sink) {\n  return duplex(sink, null);\n};\n\nvar next = 'undefined' === typeof setImmediate ? process.nextTick : setImmediate;\n\nfunction duplex(reader, read) {\n  if (reader && 'object' === typeof reader) {\n    read = reader.source;\n    reader = reader.sink;\n  }\n\n  var cbs = [],\n      input = [],\n      ended,\n      needDrain;\n  var s = new Stream();\n  s.writable = s.readable = true;\n\n  s.write = function (data) {\n    if (cbs.length) cbs.shift()(null, data);else input.push(data);\n\n    if (!cbs.length) {\n      needDrain = true;\n    }\n\n    return !!cbs.length;\n  };\n\n  s.end = function () {\n    if (read) {\n      if (input.length) drain();else read(ended = true, cbs.length ? cbs.shift() : function () {});\n    } else if (cbs.length) {\n      cbs.shift()(true);\n    }\n  };\n\n  s.source = function (end, cb) {\n    if (input.length) {\n      cb(null, input.shift());\n      if (!input.length) s.emit('drain');\n    } else {\n      if (ended = ended || end) cb(ended);else cbs.push(cb);\n\n      if (needDrain) {\n        needDrain = false;\n        s.emit('drain');\n      }\n    }\n  };\n\n  var n;\n  if (reader) n = reader(s.source);\n  if (n && !read) read = n;\n  var output = [],\n      _cbs = [];\n  var _ended = false,\n      waiting = false,\n      busy = false;\n\n  s.sink = function (_read) {\n    read = _read;\n    next(drain);\n  };\n\n  if (read) {\n    s.sink(read);\n    var pipe = s.pipe.bind(s);\n\n    s.pipe = function (dest, opts) {\n      var res = pipe(dest, opts);\n      if (s.paused) s.resume();\n      return res;\n    };\n  }\n\n  function drain() {\n    waiting = false;\n    if (!read || busy) return;\n\n    while (output.length && !s.paused) {\n      s.emit('data', output.shift());\n    }\n\n    if (s.paused) return;\n    if (_ended) return s.emit('end');\n    busy = true;\n    read(null, function next(end, data) {\n      busy = false;\n\n      if (s.paused) {\n        if (end === true) _ended = end;else if (end) s.emit('error', end);else output.push(data);\n        waiting = true;\n      } else {\n        if (end && (ended = end) !== true) s.emit('error', end);else if (ended = ended || end) s.emit('end');else {\n          s.emit('data', data);\n          busy = true;\n          read(null, next);\n        }\n      }\n    });\n  }\n\n  s.pause = function () {\n    s.paused = true;\n    return s;\n  };\n\n  s.resume = function () {\n    s.paused = false;\n    drain();\n    return s;\n  };\n\n  s.destroy = function () {\n    if (!ended && read) read(ended = true, function () {});\n    ended = true;\n    if (cbs.length) cbs.shift()(true);\n    s.emit('close');\n  };\n\n  return s;\n}","map":null,"metadata":{},"sourceType":"script"}