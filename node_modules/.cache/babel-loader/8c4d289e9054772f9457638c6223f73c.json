{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGLink = dagPB.DAGLink;\n\nconst cleanMultihash = require('../utils/clean-multihash');\n\nconst bs58 = require('bs58');\n\nconst LRU = require('lru-cache');\n\nconst lruOptions = {\n  max: 128\n};\nconst cache = LRU(lruOptions);\n\nmodule.exports = send => {\n  return promisify((multihash, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    try {\n      multihash = cleanMultihash(multihash, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    const node = cache.get(multihash);\n\n    if (node) {\n      return callback(null, node.links);\n    }\n\n    send({\n      path: 'object/links',\n      args: multihash\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let links = [];\n\n      if (result.Links) {\n        links = result.Links.map(l => {\n          return new DAGLink(l.Name, l.Size, Buffer.from(bs58.decode(l.Hash)));\n        });\n      }\n\n      callback(null, links);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}