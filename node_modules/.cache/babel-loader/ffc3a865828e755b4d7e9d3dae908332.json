{"ast":null,"code":"'use strict';\n\nconst multiaddr = require('multiaddr');\n\nconst loadCommands = require('./utils/load-commands');\n\nconst getConfig = require('./utils/default-config');\n\nconst sendRequest = require('./utils/send-request');\n\nfunction IpfsAPI(hostOrMultiaddr, port, opts) {\n  const config = getConfig();\n\n  try {\n    const maddr = multiaddr(hostOrMultiaddr).nodeAddress();\n    config.host = maddr.address;\n    config.port = maddr.port;\n  } catch (e) {\n    if (typeof hostOrMultiaddr === 'string') {\n      config.host = hostOrMultiaddr;\n      config.port = port && typeof port !== 'object' ? port : config.port;\n    }\n  }\n\n  let lastIndex = arguments.length;\n\n  while (!opts && lastIndex-- > 0) {\n    opts = arguments[lastIndex];\n    if (opts) break;\n  }\n\n  Object.assign(config, opts); // autoconfigure in browser\n\n  if (!config.host && typeof self !== 'undefined') {\n    const split = self.location.host.split(':');\n    config.host = split[0];\n    config.port = split[1];\n  }\n\n  const requestAPI = sendRequest(config);\n  const cmds = loadCommands(requestAPI, config);\n  cmds.send = requestAPI;\n  cmds.Buffer = Buffer; // Added buffer in types (this should be removed once a breaking change is release)\n\n  return cmds;\n}\n\nexports = module.exports = IpfsAPI;","map":null,"metadata":{},"sourceType":"script"}