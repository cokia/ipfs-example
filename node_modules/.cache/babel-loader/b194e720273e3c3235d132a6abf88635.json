{"ast":null,"code":"/**\n * Support for concurrent task management and synchronization in web\n * applications.\n *\n * @author Dave Longley\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2009-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\nrequire('./debug');\n\nrequire('./log');\n\nrequire('./util'); // logging category\n\n\nvar cat = 'forge.task'; // verbose level\n// 0: off, 1: a little, 2: a whole lot\n// Verbose debug logging is surrounded by a level check to avoid the\n// performance issues with even calling the logging code regardless if it\n// is actually logged.  For performance reasons this should not be set to 2\n// for production use.\n// ex: if(sVL >= 2) forge.log.verbose(....)\n\nvar sVL = 0; // track tasks for debugging\n\nvar sTasks = {};\nvar sNextTaskId = 0; // debug access\n\nforge.debug.set(cat, 'tasks', sTasks); // a map of task type to task queue\n\nvar sTaskQueues = {}; // debug access\n\nforge.debug.set(cat, 'queues', sTaskQueues); // name for unnamed tasks\n\nvar sNoTaskName = '?'; // maximum number of doNext() recursions before a context swap occurs\n// FIXME: might need to tweak this based on the browser\n\nvar sMaxRecursions = 30; // time slice for doing tasks before a context swap occurs\n// FIXME: might need to tweak this based on the browser\n\nvar sTimeSlice = 20;\n/**\n * Task states.\n *\n * READY: ready to start processing\n * RUNNING: task or a subtask is running\n * BLOCKED: task is waiting to acquire N permits to continue\n * SLEEPING: task is sleeping for a period of time\n * DONE: task is done\n * ERROR: task has an error\n */\n\nvar READY = 'ready';\nvar RUNNING = 'running';\nvar BLOCKED = 'blocked';\nvar SLEEPING = 'sleeping';\nvar DONE = 'done';\nvar ERROR = 'error';\n/**\n * Task actions.  Used to control state transitions.\n *\n * STOP: stop processing\n * START: start processing tasks\n * BLOCK: block task from continuing until 1 or more permits are released\n * UNBLOCK: release one or more permits\n * SLEEP: sleep for a period of time\n * WAKEUP: wakeup early from SLEEPING state\n * CANCEL: cancel further tasks\n * FAIL: a failure occured\n */\n\nvar STOP = 'stop';\nvar START = 'start';\nvar BLOCK = 'block';\nvar UNBLOCK = 'unblock';\nvar SLEEP = 'sleep';\nvar WAKEUP = 'wakeup';\nvar CANCEL = 'cancel';\nvar FAIL = 'fail';\n/**\n * State transition table.\n *\n * nextState = sStateTable[currentState][action]\n */\n\nvar sStateTable = {};\nsStateTable[READY] = {};\nsStateTable[READY][STOP] = READY;\nsStateTable[READY][START] = RUNNING;\nsStateTable[READY][CANCEL] = DONE;\nsStateTable[READY][FAIL] = ERROR;\nsStateTable[RUNNING] = {};\nsStateTable[RUNNING][STOP] = READY;\nsStateTable[RUNNING][START] = RUNNING;\nsStateTable[RUNNING][BLOCK] = BLOCKED;\nsStateTable[RUNNING][UNBLOCK] = RUNNING;\nsStateTable[RUNNING][SLEEP] = SLEEPING;\nsStateTable[RUNNING][WAKEUP] = RUNNING;\nsStateTable[RUNNING][CANCEL] = DONE;\nsStateTable[RUNNING][FAIL] = ERROR;\nsStateTable[BLOCKED] = {};\nsStateTable[BLOCKED][STOP] = BLOCKED;\nsStateTable[BLOCKED][START] = BLOCKED;\nsStateTable[BLOCKED][BLOCK] = BLOCKED;\nsStateTable[BLOCKED][UNBLOCK] = BLOCKED;\nsStateTable[BLOCKED][SLEEP] = BLOCKED;\nsStateTable[BLOCKED][WAKEUP] = BLOCKED;\nsStateTable[BLOCKED][CANCEL] = DONE;\nsStateTable[BLOCKED][FAIL] = ERROR;\nsStateTable[SLEEPING] = {};\nsStateTable[SLEEPING][STOP] = SLEEPING;\nsStateTable[SLEEPING][START] = SLEEPING;\nsStateTable[SLEEPING][BLOCK] = SLEEPING;\nsStateTable[SLEEPING][UNBLOCK] = SLEEPING;\nsStateTable[SLEEPING][SLEEP] = SLEEPING;\nsStateTable[SLEEPING][WAKEUP] = SLEEPING;\nsStateTable[SLEEPING][CANCEL] = DONE;\nsStateTable[SLEEPING][FAIL] = ERROR;\nsStateTable[DONE] = {};\nsStateTable[DONE][STOP] = DONE;\nsStateTable[DONE][START] = DONE;\nsStateTable[DONE][BLOCK] = DONE;\nsStateTable[DONE][UNBLOCK] = DONE;\nsStateTable[DONE][SLEEP] = DONE;\nsStateTable[DONE][WAKEUP] = DONE;\nsStateTable[DONE][CANCEL] = DONE;\nsStateTable[DONE][FAIL] = ERROR;\nsStateTable[ERROR] = {};\nsStateTable[ERROR][STOP] = ERROR;\nsStateTable[ERROR][START] = ERROR;\nsStateTable[ERROR][BLOCK] = ERROR;\nsStateTable[ERROR][UNBLOCK] = ERROR;\nsStateTable[ERROR][SLEEP] = ERROR;\nsStateTable[ERROR][WAKEUP] = ERROR;\nsStateTable[ERROR][CANCEL] = ERROR;\nsStateTable[ERROR][FAIL] = ERROR;\n/**\n * Creates a new task.\n *\n * @param options options for this task\n *   run: the run function for the task (required)\n *   name: the run function for the task (optional)\n *   parent: parent of this task (optional)\n *\n * @return the empty task.\n */\n\nvar Task = function (options) {\n  // task id\n  this.id = -1; // task name\n\n  this.name = options.name || sNoTaskName; // task has no parent\n\n  this.parent = options.parent || null; // save run function\n\n  this.run = options.run; // create a queue of subtasks to run\n\n  this.subtasks = []; // error flag\n\n  this.error = false; // state of the task\n\n  this.state = READY; // number of times the task has been blocked (also the number\n  // of permits needed to be released to continue running)\n\n  this.blocks = 0; // timeout id when sleeping\n\n  this.timeoutId = null; // no swap time yet\n\n  this.swapTime = null; // no user data\n\n  this.userData = null; // initialize task\n  // FIXME: deal with overflow\n\n  this.id = sNextTaskId++;\n  sTasks[this.id] = this;\n\n  if (sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] init', this.id, this.name, this);\n  }\n};\n/**\n * Logs debug information on this task and the system state.\n */\n\n\nTask.prototype.debug = function (msg) {\n  msg = msg || '';\n  forge.log.debug(cat, msg, '[%s][%s] task:', this.id, this.name, this, 'subtasks:', this.subtasks.length, 'queue:', sTaskQueues);\n};\n/**\n * Adds a subtask to run after task.doNext() or task.fail() is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun a function to run that takes the current task as\n *          its first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\n\n\nTask.prototype.next = function (name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if (typeof name === 'function') {\n    subrun = name; // inherit parent's name\n\n    name = this.name;\n  } // create subtask, set parent to this task, propagate callbacks\n\n\n  var subtask = new Task({\n    run: subrun,\n    name: name,\n    parent: this\n  }); // start subtasks running\n\n  subtask.state = RUNNING;\n  subtask.type = this.type;\n  subtask.successCallback = this.successCallback || null;\n  subtask.failureCallback = this.failureCallback || null; // queue a new subtask\n\n  this.subtasks.push(subtask);\n  return this;\n};\n/**\n * Adds subtasks to run in parallel after task.doNext() or task.fail()\n * is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun functions to run that take the current task as\n *          their first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\n\n\nTask.prototype.parallel = function (name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if (forge.util.isArray(name)) {\n    subrun = name; // inherit parent's name\n\n    name = this.name;\n  } // Wrap parallel tasks in a regular task so they are started at the\n  // proper time.\n\n\n  return this.next(name, function (task) {\n    // block waiting for subtasks\n    var ptask = task;\n    ptask.block(subrun.length); // we pass the iterator from the loop below as a parameter\n    // to a function because it is otherwise included in the\n    // closure and changes as the loop changes -- causing i\n    // to always be set to its highest value\n\n    var startParallelTask = function (pname, pi) {\n      forge.task.start({\n        type: pname,\n        run: function (task) {\n          subrun[pi](task);\n        },\n        success: function (task) {\n          ptask.unblock();\n        },\n        failure: function (task) {\n          ptask.unblock();\n        }\n      });\n    };\n\n    for (var i = 0; i < subrun.length; i++) {\n      // Type must be unique so task starts in parallel:\n      //    name + private string + task id + sub-task index\n      // start tasks in parallel and unblock when the finish\n      var pname = name + '__parallel-' + task.id + '-' + i;\n      var pi = i;\n      startParallelTask(pname, pi);\n    }\n  });\n};\n/**\n * Stops a running task.\n */\n\n\nTask.prototype.stop = function () {\n  this.state = sStateTable[this.state][STOP];\n};\n/**\n * Starts running a task.\n */\n\n\nTask.prototype.start = function () {\n  this.error = false;\n  this.state = sStateTable[this.state][START]; // try to restart\n\n  if (this.state === RUNNING) {\n    this.start = new Date();\n    this.run(this);\n    runNext(this, 0);\n  }\n};\n/**\n * Blocks a task until it one or more permits have been released. The\n * task will not resume until the requested number of permits have\n * been released with call(s) to unblock().\n *\n * @param n number of permits to wait for(default: 1).\n */\n\n\nTask.prototype.block = function (n) {\n  n = typeof n === 'undefined' ? 1 : n;\n  this.blocks += n;\n\n  if (this.blocks > 0) {\n    this.state = sStateTable[this.state][BLOCK];\n  }\n};\n/**\n * Releases a permit to unblock a task. If a task was blocked by\n * requesting N permits via block(), then it will only continue\n * running once enough permits have been released via unblock() calls.\n *\n * If multiple processes need to synchronize with a single task then\n * use a condition variable (see forge.task.createCondition). It is\n * an error to unblock a task more times than it has been blocked.\n *\n * @param n number of permits to release (default: 1).\n *\n * @return the current block count (task is unblocked when count is 0)\n */\n\n\nTask.prototype.unblock = function (n) {\n  n = typeof n === 'undefined' ? 1 : n;\n  this.blocks -= n;\n\n  if (this.blocks === 0 && this.state !== DONE) {\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n\n  return this.blocks;\n};\n/**\n * Sleep for a period of time before resuming tasks.\n *\n * @param n number of milliseconds to sleep (default: 0).\n */\n\n\nTask.prototype.sleep = function (n) {\n  n = typeof n === 'undefined' ? 0 : n;\n  this.state = sStateTable[this.state][SLEEP];\n  var self = this;\n  this.timeoutId = setTimeout(function () {\n    self.timeoutId = null;\n    self.state = RUNNING;\n    runNext(self, 0);\n  }, n);\n};\n/**\n * Waits on a condition variable until notified. The next task will\n * not be scheduled until notification. A condition variable can be\n * created with forge.task.createCondition().\n *\n * Once cond.notify() is called, the task will continue.\n *\n * @param cond the condition variable to wait on.\n */\n\n\nTask.prototype.wait = function (cond) {\n  cond.wait(this);\n};\n/**\n * If sleeping, wakeup and continue running tasks.\n */\n\n\nTask.prototype.wakeup = function () {\n  if (this.state === SLEEPING) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n};\n/**\n * Cancel all remaining subtasks of this task.\n */\n\n\nTask.prototype.cancel = function () {\n  this.state = sStateTable[this.state][CANCEL]; // remove permits needed\n\n  this.permitsNeeded = 0; // cancel timeouts\n\n  if (this.timeoutId !== null) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n  } // remove subtasks\n\n\n  this.subtasks = [];\n};\n/**\n * Finishes this task with failure and sets error flag. The entire\n * task will be aborted unless the next task that should execute\n * is passed as a parameter. This allows levels of subtasks to be\n * skipped. For instance, to abort only this tasks's subtasks, then\n * call fail(task.parent). To abort this task's subtasks and its\n * parent's subtasks, call fail(task.parent.parent). To abort\n * all tasks and simply call the task callback, call fail() or\n * fail(null).\n *\n * The task callback (success or failure) will always, eventually, be\n * called.\n *\n * @param next the task to continue at, or null to abort entirely.\n */\n\n\nTask.prototype.fail = function (next) {\n  // set error flag\n  this.error = true; // finish task\n\n  finish(this, true);\n\n  if (next) {\n    // propagate task info\n    next.error = this.error;\n    next.swapTime = this.swapTime;\n    next.userData = this.userData; // do next task as specified\n\n    runNext(next, 0);\n  } else {\n    if (this.parent !== null) {\n      // finish root task (ensures it is removed from task queue)\n      var parent = this.parent;\n\n      while (parent.parent !== null) {\n        // propagate task info\n        parent.error = this.error;\n        parent.swapTime = this.swapTime;\n        parent.userData = this.userData;\n        parent = parent.parent;\n      }\n\n      finish(parent, true);\n    } // call failure callback if one exists\n\n\n    if (this.failureCallback) {\n      this.failureCallback(this);\n    }\n  }\n};\n/**\n * Asynchronously start a task.\n *\n * @param task the task to start.\n */\n\n\nvar start = function (task) {\n  task.error = false;\n  task.state = sStateTable[task.state][START];\n  setTimeout(function () {\n    if (task.state === RUNNING) {\n      task.swapTime = +new Date();\n      task.run(task);\n      runNext(task, 0);\n    }\n  }, 0);\n};\n/**\n * Run the next subtask or finish this task.\n *\n * @param task the task to process.\n * @param recurse the recursion count.\n */\n\n\nvar runNext = function (task, recurse) {\n  // get time since last context swap (ms), if enough time has passed set\n  // swap to true to indicate that doNext was performed asynchronously\n  // also, if recurse is too high do asynchronously\n  var swap = recurse > sMaxRecursions || +new Date() - task.swapTime > sTimeSlice;\n\n  var doNext = function (recurse) {\n    recurse++;\n\n    if (task.state === RUNNING) {\n      if (swap) {\n        // update swap time\n        task.swapTime = +new Date();\n      }\n\n      if (task.subtasks.length > 0) {\n        // run next subtask\n        var subtask = task.subtasks.shift();\n        subtask.error = task.error;\n        subtask.swapTime = task.swapTime;\n        subtask.userData = task.userData;\n        subtask.run(subtask);\n\n        if (!subtask.error) {\n          runNext(subtask, recurse);\n        }\n      } else {\n        finish(task);\n\n        if (!task.error) {\n          // chain back up and run parent\n          if (task.parent !== null) {\n            // propagate task info\n            task.parent.error = task.error;\n            task.parent.swapTime = task.swapTime;\n            task.parent.userData = task.userData; // no subtasks left, call run next subtask on parent\n\n            runNext(task.parent, recurse);\n          }\n        }\n      }\n    }\n  };\n\n  if (swap) {\n    // we're swapping, so run asynchronously\n    setTimeout(doNext, 0);\n  } else {\n    // not swapping, so run synchronously\n    doNext(recurse);\n  }\n};\n/**\n * Finishes a task and looks for the next task in the queue to start.\n *\n * @param task the task to finish.\n * @param suppressCallbacks true to suppress callbacks.\n */\n\n\nvar finish = function (task, suppressCallbacks) {\n  // subtask is now done\n  task.state = DONE;\n  delete sTasks[task.id];\n\n  if (sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] finish', task.id, task.name, task);\n  } // only do queue processing for root tasks\n\n\n  if (task.parent === null) {\n    // report error if queue is missing\n    if (!(task.type in sTaskQueues)) {\n      forge.log.error(cat, '[%s][%s] task queue missing [%s]', task.id, task.name, task.type);\n    } else if (sTaskQueues[task.type].length === 0) {\n      // report error if queue is empty\n      forge.log.error(cat, '[%s][%s] task queue empty [%s]', task.id, task.name, task.type);\n    } else if (sTaskQueues[task.type][0] !== task) {\n      // report error if this task isn't the first in the queue\n      forge.log.error(cat, '[%s][%s] task not first in queue [%s]', task.id, task.name, task.type);\n    } else {\n      // remove ourselves from the queue\n      sTaskQueues[task.type].shift(); // clean up queue if it is empty\n\n      if (sTaskQueues[task.type].length === 0) {\n        if (sVL >= 1) {\n          forge.log.verbose(cat, '[%s][%s] delete queue [%s]', task.id, task.name, task.type);\n        }\n        /* Note: Only a task can delete a queue of its own type. This\n         is used as a way to synchronize tasks. If a queue for a certain\n         task type exists, then a task of that type is running.\n         */\n\n\n        delete sTaskQueues[task.type];\n      } else {\n        // dequeue the next task and start it\n        if (sVL >= 1) {\n          forge.log.verbose(cat, '[%s][%s] queue start next [%s] remain:%s', task.id, task.name, task.type, sTaskQueues[task.type].length);\n        }\n\n        sTaskQueues[task.type][0].start();\n      }\n    }\n\n    if (!suppressCallbacks) {\n      // call final callback if one exists\n      if (task.error && task.failureCallback) {\n        task.failureCallback(task);\n      } else if (!task.error && task.successCallback) {\n        task.successCallback(task);\n      }\n    }\n  }\n};\n/* Tasks API */\n\n\nmodule.exports = forge.task = forge.task || {};\n/**\n * Starts a new task that will run the passed function asynchronously.\n *\n * In order to finish the task, either task.doNext() or task.fail()\n * *must* be called.\n *\n * The task must have a type (a string identifier) that can be used to\n * synchronize it with other tasks of the same type. That type can also\n * be used to cancel tasks that haven't started yet.\n *\n * To start a task, the following object must be provided as a parameter\n * (each function takes a task object as its first parameter):\n *\n * {\n *   type: the type of task.\n *   run: the function to run to execute the task.\n *   success: a callback to call when the task succeeds (optional).\n *   failure: a callback to call when the task fails (optional).\n * }\n *\n * @param options the object as described above.\n */\n\nforge.task.start = function (options) {\n  // create a new task\n  var task = new Task({\n    run: options.run,\n    name: options.name || sNoTaskName\n  });\n  task.type = options.type;\n  task.successCallback = options.success || null;\n  task.failureCallback = options.failure || null; // append the task onto the appropriate queue\n\n  if (!(task.type in sTaskQueues)) {\n    if (sVL >= 1) {\n      forge.log.verbose(cat, '[%s][%s] create queue [%s]', task.id, task.name, task.type);\n    } // create the queue with the new task\n\n\n    sTaskQueues[task.type] = [task];\n    start(task);\n  } else {\n    // push the task onto the queue, it will be run after a task\n    // with the same type completes\n    sTaskQueues[options.type].push(task);\n  }\n};\n/**\n * Cancels all tasks of the given type that haven't started yet.\n *\n * @param type the type of task to cancel.\n */\n\n\nforge.task.cancel = function (type) {\n  // find the task queue\n  if (type in sTaskQueues) {\n    // empty all but the current task from the queue\n    sTaskQueues[type] = [sTaskQueues[type][0]];\n  }\n};\n/**\n * Creates a condition variable to synchronize tasks. To make a task wait\n * on the condition variable, call task.wait(condition). To notify all\n * tasks that are waiting, call condition.notify().\n *\n * @return the condition variable.\n */\n\n\nforge.task.createCondition = function () {\n  var cond = {\n    // all tasks that are blocked\n    tasks: {}\n  };\n  /**\n   * Causes the given task to block until notify is called. If the task\n   * is already waiting on this condition then this is a no-op.\n   *\n   * @param task the task to cause to wait.\n   */\n\n  cond.wait = function (task) {\n    // only block once\n    if (!(task.id in cond.tasks)) {\n      task.block();\n      cond.tasks[task.id] = task;\n    }\n  };\n  /**\n   * Notifies all waiting tasks to wake up.\n   */\n\n\n  cond.notify = function () {\n    // since unblock() will run the next task from here, make sure to\n    // clear the condition's blocked task list before unblocking\n    var tmp = cond.tasks;\n    cond.tasks = {};\n\n    for (var id in tmp) {\n      tmp[id].unblock();\n    }\n  };\n\n  return cond;\n};","map":null,"metadata":{},"sourceType":"script"}