{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst assert = require('assert');\n\nconst withIs = require('class-is'); // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nclass DAGLink {\n  constructor(name, size, multihash) {\n    assert(multihash, 'A link requires a multihash to point to'); // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || '';\n    this._size = size;\n    this._cid = new CID(multihash);\n  }\n\n  toString() {\n    return \"DAGLink <\".concat(this._cid.toBaseEncodedString(), \" - name: \\\"\").concat(this.name, \"\\\", size: \").concat(this.size, \">\");\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.name,\n        size: this.size,\n        multihash: this._cid.toBaseEncodedString()\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(name) {\n    throw new Error(\"Can't set property: 'name' is immutable\");\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n\n  get multihash() {\n    return this._cid.buffer;\n  }\n\n  set multihash(multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\");\n  }\n\n  get cid() {\n    return this._cid;\n  }\n\n  set cid(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});\nexports.create = require('./create');\nexports.util = require('./util');","map":null,"metadata":{},"sourceType":"script"}