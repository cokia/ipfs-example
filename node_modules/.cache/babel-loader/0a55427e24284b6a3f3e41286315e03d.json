{"ast":null,"code":"var _jsxFileName = \"/Users/h4nuko0n/ipfs-example/eth-ipfs/src/App.js\";\nimport { Table, Grid, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react'; //import logo from './logo.svg';\n\nimport './App.css'; // import storehash from './storehash';\n\n/* -------------web3----------------- */\n\n/* overrides metamask v0.2 for our v 1.0 */\n// import Web3 from 'web3';\n// const web3 = new Web3(window.web3.currentProvider);ㅋ\n\n/* -------------IPFS--------------- */\n\nconst IPFS = require('ipfs-api');\n/* infura 사용 */\n\n\nconst ipfs = new IPFS({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n/* local 사용 */\n// const ipfs = new IPFS('localhost', '5001', {protocol: 'http'});\n\n/* -------------------------------- */\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ipfsHash: null,\n      buffer: '',\n      transactionHash: '',\n      txReceipt: '',\n      filename: '',\n      cid: ''\n    };\n\n    this.captureFile = event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0]; // this.setState.filename\n\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    };\n\n    this.convertToBuffer = async reader => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n      const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n      this.setState({\n        buffer\n      });\n    };\n\n    this.onRefresh = async () => {\n      try {\n        this.setState({\n          blockNumber: \"waiting..\"\n        });\n        this.setState({\n          gasUsed: \"waiting...\"\n        }); // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        // await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n        //   console.log(err, txReceipt);\n        //   this.setState({ txReceipt });\n        // }); //await for getTransactionReceipt\n\n        await this.setState({\n          blockNumber: this.state.txReceipt.blockNumber\n        });\n        await this.setState({\n          gasUsed: this.state.txReceipt.gasUsed\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.onUpload = async event => {\n      event.preventDefault(); //bring in user's metamask account address\n      // const accounts = await web3.eth.getAccounts();\n      // console.log('Sending from Metamask account: ' + accounts[0]);\n      //obtain contract address from storehash.js\n      // const ethAddress = await storehash.options.address;\n      // this.setState({ ethAddress });\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash \n\n        this.setState({\n          ipfsHash: ipfsHash[0].hash\n        }); // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        // console.log(accounts[0]);\n        // storehash.methods.sendHash(this.state.ipfsHash).send({\n        //   from: accounts[0]\n        // }, (error, transactionHash) => {\n        //   console.log(transactionHash);\n        //   this.setState({ transactionHash });\n        // }); //storehash \n      }); //await ipfs.add \n    };\n\n    this.onGet = async event => {\n      event.preventDefault();\n      console.log(this.state.cid); // ipfs.get(validCID, function (err, files) {\n      //   files.forEach((file) => {\n      //     console.log(file.path)\n      //     console.log(file.content.toString('utf8'))\n      //   })\n      // })\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \" ETH + IPFS upload simple example dapp (ETHCON KOREA 2019)\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"upload file to IPFS\"), React.createElement(Form, {\n      onSubmit: this.onUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.captureFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Button, {\n      bsStyle: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Send it\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Button, {\n      class: \"send\",\n      onClick: this.onRefresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \" refresh \"), React.createElement(Table, {\n      bordered: true,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Transaction Data\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Values\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"File Name\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"IPFS Hash\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.state.ipfsHash)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"ETH CONTRACT ADDR\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.state.ethAddress)), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Tx Hash\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, this.state.transactionHash)))), \"HASH\", React.createElement(Form, {\n      onSubmit: this.onGet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: this.state.cid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(Button, {\n      bsStyle: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Get it!\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    })));\n  } //render\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/h4nuko0n/ipfs-example/eth-ipfs/src/App.js"],"names":["Table","Grid","Button","Form","React","Component","IPFS","require","ipfs","host","port","protocol","App","state","ipfsHash","buffer","transactionHash","txReceipt","filename","cid","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","setState","onRefresh","blockNumber","gasUsed","error","console","log","onUpload","add","err","hash","onGet","render","ethAddress"],"mappings":"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","sourcesContent":["import { Table, Grid, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\n\n//import logo from './logo.svg';\n\nimport './App.css';\n// import storehash from './storehash';\n/* -------------web3----------------- */\n/* overrides metamask v0.2 for our v 1.0 */\n\n// import Web3 from 'web3';\n// const web3 = new Web3(window.web3.currentProvider);ㅋ\n\n/* -------------IPFS--------------- */\nconst IPFS = require('ipfs-api');\n\n/* infura 사용 */\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\n/* local 사용 */\n// const ipfs = new IPFS('localhost', '5001', {protocol: 'http'});\n\n/* -------------------------------- */\n\nclass App extends Component {\n  state = {\n    ipfsHash: null,\n    buffer: '',\n    transactionHash: '',\n    txReceipt: '',\n    filename: '',\n    cid: ''\n  };\n\n  captureFile = (event) => {\n    event.stopPropagation()\n    event.preventDefault()\n    const file = event.target.files[0]\n    // this.setState.filename\n    let reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => this.convertToBuffer(reader)\n\n  };\n\n  convertToBuffer = async (reader) => {\n    //file is converted to a buffer to prepare for uploading to IPFS\n    const buffer = await Buffer.from(reader.result);\n    //set this buffer -using es6 syntax\n    this.setState({ buffer });\n  };\n\n  onRefresh = async () => {\n    try {\n      this.setState({ blockNumber: \"waiting..\" });\n      this.setState({ gasUsed: \"waiting...\" });\n\n      // get Transaction Receipt in console on click\n      // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n      // await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n      //   console.log(err, txReceipt);\n      //   this.setState({ txReceipt });\n      // }); //await for getTransactionReceipt\n\n      await this.setState({ blockNumber: this.state.txReceipt.blockNumber });\n      await this.setState({ gasUsed: this.state.txReceipt.gasUsed });\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  onUpload = async (event) => {\n    event.preventDefault();\n\n    //bring in user's metamask account address\n    // const accounts = await web3.eth.getAccounts();\n\n    // console.log('Sending from Metamask account: ' + accounts[0]);\n\n    //obtain contract address from storehash.js\n    // const ethAddress = await storehash.options.address;\n    // this.setState({ ethAddress });\n\n    //save document to IPFS,return its hash#, and set hash# to state\n    //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n    await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n      console.log(err, ipfsHash);\n      //setState by setting ipfsHash to ipfsHash[0].hash \n      this.setState({ ipfsHash: ipfsHash[0].hash });\n\n      // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n      //return the transaction hash from the ethereum contract\n      //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n      // console.log(accounts[0]);\n      // storehash.methods.sendHash(this.state.ipfsHash).send({\n      //   from: accounts[0]\n      // }, (error, transactionHash) => {\n      //   console.log(transactionHash);\n      //   this.setState({ transactionHash });\n      // }); //storehash \n    }) //await ipfs.add \n  }; //onSubmit \n\n  onGet = async (event) => {\n    event.preventDefault();\n    console.log(this.state.cid);\n    // ipfs.get(validCID, function (err, files) {\n    //   files.forEach((file) => {\n    //     console.log(file.path)\n    //     console.log(file.content.toString('utf8'))\n    //   })\n    // })\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> ETH + IPFS upload simple example dapp (ETHCON KOREA 2019)</h1>\n        </header>\n\n        <hr />\n\n        <Grid>\n          <h3>upload file to IPFS</h3>\n          <Form onSubmit={this.onUpload}>\n            <input\n              type=\"file\"\n              onChange={this.captureFile}\n            />\n            <Button\n              bsStyle=\"primary\"\n              type=\"submit\">\n              Send it\n             </Button>\n          </Form>\n          <hr />\n          <Button class=\"send\" onClick={this.onRefresh}> refresh </Button>\n\n          <Table bordered responsive>\n            <thead>\n              <tr>\n                <th>Transaction Data</th>\n                <th>Values</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td>File Name</td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>IPFS Hash</td>\n                <td>{this.state.ipfsHash}</td>\n              </tr>\n              <tr>\n                <td>ETH CONTRACT ADDR</td>\n                <td>{this.state.ethAddress}</td>\n              </tr>\n\n              <tr>\n                <td>Tx Hash</td>\n                <td>{this.state.transactionHash}</td>\n              </tr>\n            </tbody>\n          </Table>\n          HASH\n          <Form onSubmit={this.onGet}>\n            <input\n              value={this.state.cid}\n            />\n            <Button\n              bsStyle=\"primary\"\n              type=\"submit\">\n              Get it!\n             </Button>\n          </Form>\n          <hr />\n        </Grid>\n      </div>\n    );\n  } //render\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}