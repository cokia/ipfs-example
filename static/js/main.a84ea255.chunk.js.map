{"version":3,"sources":["registerServiceWorker.js","index.js","storehash.js","App.js","logo.svg"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","react_default","a","createElement","App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","web3__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","web3","n","Web3","currentProvider","__webpack_exports__","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","ipfs","require","host","port","protocol","ipfsHash","buffer","transactionHash","txReceipt","filename","cid","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","_this","convertToBuffer","onCID","setState","value","_callee","_Users_h4nuko0n_ipfs1234_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","next","Buffer","from","result","sent","stop","onRefresh","_callee2","_context2","blockNumber","gasUsed","getTransactionReceipt","err","t0","onUpload","_callee3","accounts","ethAddress","_context3","getAccounts","storehash","options","address","add","hash","methods","sendHash","send","onGet","_callee4","_context4","forEach","path","createAndDownloadBlobFile","content","body","blob","Blob","fileName","msSaveBlob","link","undefined","download","url","createObjectURL","setAttribute","style","visibility","appendChild","click","removeChild","react__WEBPACK_IMPORTED_MODULE_11___default","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","onSubmit","this","onChange","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","bsStyle","class","onClick","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","bordered","responsive","Component","module","exports","p"],"mappings":"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","file":"static/js/main.a84ea255.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-stylesheet\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","import Web3 from 'web3';\n//overrides metamask v0.2 for our v 1.0\nconst web3 = new Web3(window.web3.currentProvider);\n\n\n//access our local copy to contract deployed on ropsten testnet\nconst address = '0x184a5861bC67C37F9cFf0f0340B77c5357C19F98';\n//use the ABI from your contract\nconst abi = [\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"getHash\",\n    \"outputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"sendHash\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\nexport default new web3.eth.Contract(abi, address);\n","/* ------------React----------------- */\nimport { Table, Grid, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport storehash from './storehash';\n/* -------------web3----------------- */\n/* overrides metamask v0.2 for our v 1.0 */\n\nimport Web3 from 'web3';\nconst web3 = new Web3(window.web3.currentProvider);\n\n/* -------------IPFS--------------- */\nconst IPFS = require('ipfs-api');\n/* infura 사용 */\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\n/* local 사용 */\n// const ipfs = new IPFS('localhost', '5001', {protocol: 'http'});\n/* -------------------------------- */\n\nclass App extends Component {\n  /* state 선언 */\n  state = {\n    ipfsHash: null,\n    buffer: '',\n    transactionHash: '',\n    txReceipt: '',\n    filename: '',\n    cid: ''\n  };\n  /* file input event */\n  captureFile = (event) => {\n    event.stopPropagation()\n    event.preventDefault()\n    const file = event.target.files[0]\n    // this.setState.filename\n    let reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => this.convertToBuffer(reader)\n  };\n\n  onCID = (event) => {\n    this.setState({\n      cid: event.target.value\n    });\n  };\n  /* File change to buffer */\n  convertToBuffer = async (reader) => {\n    //file is converted to a buffer to prepare for uploading to IPFS\n    const buffer = await Buffer.from(reader.result);\n    //set this buffer -using es6 syntax\n    this.setState({ buffer });\n\n  };\n  /* refresh button event */\n  onRefresh = async () => {\n    try {\n      this.setState({ blockNumber: \"waiting..\" });\n      this.setState({ gasUsed: \"waiting...\" });\n\n      // get Transaction Receipt in console on click\n      await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n        console.log(err, txReceipt);\n        this.setState({ txReceipt });\n      }); //await for getTransactionReceipt\n\n      await this.setState({ blockNumber: this.state.txReceipt.blockNumber });\n      await this.setState({ gasUsed: this.state.txReceipt.gasUsed });\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  onUpload = async (event) => {\n    event.preventDefault();\n\n    const accounts = await web3.eth.getAccounts();\n\n    console.log('Sending from Metamask account: ' + accounts[0]);\n\n    //obtain contract address from storehash.js\n    const ethAddress = await storehash.options.address;\n    this.setState({ ethAddress });\n\n    /* Set hash \"state\" */\n    await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n      console.log(err, ipfsHash);\n      this.setState({ ipfsHash: ipfsHash[0].hash });\n\n      // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n      console.log(accounts[0]);\n      storehash.methods.sendHash(this.state.ipfsHash).send({\n        from: accounts[0]\n      }, (error, transactionHash) => {\n        console.log(transactionHash);\n        this.setState({ transactionHash });\n      }); //storehash \n    }) //await ipfs.add \n  }; //onSubmit \n\n  /* Download event */\n  onGet = async (event) => {\n    event.preventDefault();\n    console.log(this.state.cid);\n    ipfs.get(this.state.cid, (err, files) => {\n      files.forEach((file) => {\n        console.log(file.path)\n        this.createAndDownloadBlobFile(file.content, this.state.cid);\n      })\n    })\n  };\n\n  /* Download file */\n  createAndDownloadBlobFile = (body, filename) => {\n    const blob = new Blob([body]);\n    const fileName = `${filename}`;\n    if (navigator.msSaveBlob) {\n      // IE 10+\n      navigator.msSaveBlob(blob, fileName);\n    } else {\n      const link = document.createElement('a');\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', fileName);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    }\n  };\n  /* render section */\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> ETH + IPFS upload simple example dapp (ETHCON KOREA 2019)</h1>\n        </header>\n\n        <hr />\n\n        <Grid>\n          <h3>upload file to IPFS</h3>\n          <Form onSubmit={this.onUpload}>\n            <input\n              type=\"file\"\n              onChange={this.captureFile}\n            />\n            <Button\n              bsStyle=\"primary\"\n              type=\"submit\">\n              Send it\n             </Button>\n          </Form>\n          <hr />\n          <Button class=\"send\" onClick={this.onRefresh}> refresh </Button>\n\n          <Table bordered responsive>\n            <thead>\n              <tr>\n                <th>Transaction Data</th>\n                <th>Values</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td>File Name</td>\n                <td></td>\n              </tr>\n              <tr>\n                <td>IPFS Hash</td>\n                <td>{this.state.ipfsHash}</td>\n              </tr>\n              <tr>\n                <td>ETH CONTRACT ADDR</td>\n                <td>{this.state.ethAddress}</td>\n              </tr>\n\n              <tr>\n                <td>Tx Hash</td>\n                <td>{this.state.transactionHash}</td>\n              </tr>\n            </tbody>\n          </Table>\n          HASH\n          <Form onSubmit={this.onGet}>\n            <input\n              value={this.state.cid}\n              onChange={this.onCID}\n            />\n            <Button\n              bsStyle=\"primary\"\n              type=\"submit\">\n              Get it!\n             </Button>\n          </Form>\n          <hr />\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}